#ifndef WCSIMDIGITIZATION_HH
#define WCSIMDIGITIZATION_HH

class Digitizer
{
  public:
    Digitizer()
    {
      saturationThreshold = -1;
      eff = 0.985;
    };
    virtual ~Digitizer() {};
    void SetSaturationThreshold(double val) { saturationThreshold = val; }
    void SetEfficiency(double val) { eff = val; }
    void Digitize(double &peSmeared, double &time)
    {
      int pe = (int)peSmeared;

      peSmeared=0;
      for (int i=0;i<pe;i++)
          peSmeared+=rn1pe();

      int iflag = 0;
      Threshold(peSmeared, iflag);

      //peSmeared += gRandom->Gaus(0.0,0.03);
      if (iflag==1) {
          peSmeared=0;
          return;
      } 
      
      double Q = (peSmeared > 0.5) ? peSmeared : 0.5;
      peSmeared *= eff;
      peSmeared *= SaturFactor(peSmeared, saturationThreshold);
      time += HitTimeSmearing(Q, 1.);
    }

  protected:
    double saturationThreshold;
    double eff;
    virtual const double* Getqpe()=0;
    virtual double HitTimeSmearing(double, double)=0;
    virtual double SaturFactor(double, double)=0; 
    double rn1pe()
    {
      int i;
      double random = gRandom->Uniform();
      double random2 = gRandom->Uniform(); 
      const double *qpe0 = Getqpe();
      for(i = 0; i < 501; i++){
        
        if (random <= *(qpe0+i)) break;
      }
      if(i==500)
        random = gRandom->Uniform();
      
      return ( double(i-50) + random2)/22.83; 
    }
    void Threshold(double& pe,int& iflag)
    {
      double x = pe+0.1; iflag=0;
      double thr; double RDUMMY,err;
      if ( x<1.1) {
          thr = std::min(1.0,
                  -0.06374+x*(3.748+x*(-63.23+x*(452.0+x*(-1449.0+x*(2513.0
                                      +x*(-2529.+x*(1472.0+x*(-452.2+x*(51.34+x*2.370))))))))));
      } else {
          thr = 1.0;
      }
      RDUMMY = gRandom->Uniform();
      if (thr < RDUMMY) {
          pe = 0.0;
          iflag = 1;
      }
      else {
          err = gRandom->Gaus(0.0,0.03);
          /////      call rngaus(0.0, 0.03, err);
          pe = pe+err;
      }
    }
};

class BoxandLine20inchHQE_Digitizer : public Digitizer
{
  public: 
    BoxandLine20inchHQE_Digitizer() : Digitizer()
    {};
    ~BoxandLine20inchHQE_Digitizer(){};

  private:
    const double* Getqpe() { return qpe0; }
    double HitTimeSmearing(double Q, double TTSFF=1.0) 
    {
      double sig_param[4]={0.6314,0.06260,0.5711,23.96};
      double lambda_param[2]={0.4113,0.07827};
      double sigma_lowcharge = sig_param[0]*(exp(-sig_param[1]*Q)+sig_param[2]);

      double highcharge_param[2];
      highcharge_param[0]=2*sig_param[0]*sig_param[1]*sig_param[3]*sqrt(sig_param[3])*exp(-sig_param[1]*sig_param[3]);
      highcharge_param[1]=sig_param[0]*((1-2*sig_param[1]*sig_param[3])*exp(-sig_param[1]*sig_param[3])+sig_param[2]);
      double sigma_highcharge = highcharge_param[0]/sqrt(Q)+highcharge_param[1];

      double sigma = sigma_lowcharge*(Q<sig_param[3])+sigma_highcharge*(Q>sig_param[3]);
      double lambda = lambda_param[0]+lambda_param[1]*Q;
      double Smearing_factor = gRandom->Gaus(-0.2,sigma)-1/lambda*log(1-gRandom->Uniform());
      return Smearing_factor;
    }
    double SaturFactor(double Q, double threshold=-1) {
      if (threshold <= 0) return 1; //no saturation case
      double SaturFactor = (Q < threshold) ? 1 : (100+0.008632*(threshold-Q))/100; //expression found for SK 20inch PMT, assumed to be correct for other types
      return SaturFactor; 
    }
    const double qpe0[501]= {
      // 1
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000001, 0.000001, 0.000002, 0.000004,
      0.000008, 0.000014, 0.000025, 0.000044, 0.000486,
      // 2
      0.007195, 0.019406, 0.031920, 0.044503, 0.057189,
      0.070020, 0.083060, 0.096388, 0.110108, 0.124351,
      0.139276, 0.155072, 0.171956, 0.190167, 0.209961,
      0.231594, 0.255310, 0.281319, 0.309777, 0.340762,
      0.374259, 0.410142, 0.448167, 0.487976, 0.529101,
      0.570993, 0.613041, 0.654608, 0.695067, 0.733833,
      0.770390, 0.804317, 0.835304, 0.863151, 0.887777,
      0.909203, 0.927543, 0.942987, 0.955778, 0.966198,
      0.974543, 0.981116, 0.986205, 0.990078, 0.992974,
      0.995104, 0.996642, 0.997734, 0.998495, 0.999017,
      // 3
      0.999369, 0.999601, 0.999752, 0.999848, 0.999909,
      0.999946, 0.999969, 0.999982, 0.999990, 0.999994,
      0.999997, 0.999998, 0.999999, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 4
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 5
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 6
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 7
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 8
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 9
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 10
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // Dummy element for noticing if the loop reached the end of the array                        
      0.0  
    };
};

class PMT3inchR14374_Digitizer : public Digitizer
{
  public: 
    PMT3inchR14374_Digitizer() : Digitizer()
    {};
    ~PMT3inchR14374_Digitizer(){};

  private:
    const double* Getqpe() { return qpe0; }
    double HitTimeSmearing(double Q, double TTSFF=1.0) 
    {
      //double timingConstant = 0.75;//B. Quilain, to match the TTS = 1.4ns (sigma at 0.6) measured at 1 p.e. 
      double timingResolution = 0.6;//B. Quilain, to match the TTS = 1.4ns (sigma at 0.6) measured at 1 p.e. 
      timingResolution *= TTSFF;
      //0.5*(0.33 + sqrt(timingConstant/Q));  //factor 0.5 for expected improvement and required TTS
      // looking at SK's jitter function for 20" tubes
      //if (timingResolution < 0.58) timingResolution=0.58;
      double Smearing_factor = gRandom->Gaus(0.0,timingResolution);
      return Smearing_factor;
    }
    double SaturFactor(double Q, double threshold=-1) {
      if (threshold == -1) return 1; //no saturation case
      double SaturFactor = (Q < threshold) ? 1 : (100+0.008632*(threshold-Q))/100; //expression found for SK 20inch PMT, assumed to be correct for other types
      return SaturFactor; 
    }
    const double qpe0[501]= {
      // 1
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
      0.000000, 0.000001, 0.000001, 0.000002, 0.000004,
      0.000008, 0.000014, 0.000025, 0.000044, 0.000486,
      // 2
      0.007195, 0.019406, 0.031920, 0.044503, 0.057189,
      0.070020, 0.083060, 0.096388, 0.110108, 0.124351,
      0.139276, 0.155072, 0.171956, 0.190167, 0.209961,
      0.231594, 0.255310, 0.281319, 0.309777, 0.340762,
      0.374259, 0.410142, 0.448167, 0.487976, 0.529101,
      0.570993, 0.613041, 0.654608, 0.695067, 0.733833,
      0.770390, 0.804317, 0.835304, 0.863151, 0.887777,
      0.909203, 0.927543, 0.942987, 0.955778, 0.966198,
      0.974543, 0.981116, 0.986205, 0.990078, 0.992974,
      0.995104, 0.996642, 0.997734, 0.998495, 0.999017,
      // 3
      0.999369, 0.999601, 0.999752, 0.999848, 0.999909,
      0.999946, 0.999969, 0.999982, 0.999990, 0.999994,
      0.999997, 0.999998, 0.999999, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 4
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 5
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 6
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 7
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 8
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 9
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // 10
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
      // Dummy element for noticing if the loop reached the end of the array                        
      0.0  
    };
};


#endif // WCSIMDIGITIZATION_HH