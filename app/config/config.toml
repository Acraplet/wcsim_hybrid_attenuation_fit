# Minimizer config
[Minimizer]

minimizer = "Minuit2"
algorithm = "Migrad"
likelihood = "Poisson"
print_level = 2
tolerance = 1E-6
strategy = 1
max_iter = 1E6
max_fcn = 1E9

MCMCSteps = 0
MCMCStepSize = 0.3

# List of PMT samples input to the fitter
# Each sample contains the PMT hits and geometry information of a particular source-PMT setup
[samples]

# Names of samples
names = [
    "BnL_PMT",
    "mPMT"
]

# Entry for each sample name
# Each entry is specified as:
# [pmt_type, input_file, pmt_hit_tree_name, pmt_geo_treename, [vectors of cut], [binning_config], optional_config ]
# pmt_type: 0 = B&L PMT, 1 = mPMT
# input_file, pmt_hit_tree_name, pmt_geo_treename: input file and tree names
# [vectors of cut]: simple rectangular cuts to select events of interest, each cut is specified by [variable name, cut_low, cut_high]
# [binning_config]: defines the sample binning, each bin sums over the number of PE observed in PMTs
# [binning_config] = [binning_file,[bin_vars]]: binning_file is the binning file input to BinManager class, [bin_vars] is the vector of binning variables
# binning_file: first line defines the number of dimensions, each subsequent line defines the bin edges 
# If bin_vars="unbinned", each bin corresponds to a single PMT, regardless of what the binning_file is

# optional_config: optional configurations, in the format of [key, value]
# Available options are:
# ["norm", double]: scale the number of hits in the whole sample
# ["mask", int]: Enabling only the specified number of PMTs (for mPMT, the entire module of 19 PMTs is enabled/disabled as a whole) 
# ["time_offset", width]: Random timetof offset per PMT, sampled from a Gaussian(mean = 0, sigma = width)
# ["time_smear", mean, width]: Random time smearing per PMT, sampled from a Gaussian(mean, width)

# Special optional configuration for this branch
# ["scatter_control", time1, time2, time3, correction_factor]: 
# Divide each bin into two, {time1,time2} corresponds to the main peak, {time2,time3} corresponds to the tail due to indirect photon
# The PE count is corrected as: PE = PE{time1,time2} - PE{time2,time3}*correction_factor

# The example here specifies two samples, from the input file, with different pmt tree names
# Three sets of cut are applied to the variables timetof, cosths, costh
# Binning is defined by sample_binning.txt, on the variables {costh, R}
BnL_PMT = [  0, # pmt_type: 0 = B&L PMT, 1 = mPMT
             "out.root", "hitRate_pmtType0", "pmt_type0", # input_file, pmt_hit_tree_name, pmt_geo_treename: input file and tree names
             [["timetof",-950,-940], ["cosths",0.766,1], ["costh",0.5,1]], # [vectors of cut]: simple rectangular cuts to select events of interest, each cut is specified by [variable name, cut_low, cut_high]
             ["sample_binning.txt",["costh","R"]],  # [binning_config]: defines the sample binning, each bin sums over the number of PE observed in PMTs
                                                    # [binning_config] = [binning_file,[bin_vars]]: binning_file is the binning file input to BinManager class, [bin_vars] is the vector of binning variables
                                                    # binning_file: first line defines the number of dimensions, each subsequent line defines the bin edges  
                                                    # If bin_vars="unbinned", each bin corresponds to a single PMT, regardless of what the binning_file is
          ]
mPMT    = [ 1, "out.root", "hitRate_pmtType1", "pmt_type1", [["timetof",-950,-940], ["cosths",0.766,1], ["costh",0.5,1]], ["sample_binning.txt",["costh","R"]],
            ["mask", 2000] # only use 2000 mPMT in fit
          ]


# List of fit parameters input to fitter
# Each parameter represents a multiplicative factor to parameterize the number of PE expected in each PMT
[fitparameters]

# Names of the class of fit parameters
names = [
    "norm",
    "alpha",
    "BnL_angular",
    "mPMT_angular"
]

# Entry for each parameter class
# Each entry is specified as:
# [pmt_type, function_name, npar, [par_setup], [binning_config], optional_config]
# pmt_type: 0 = apply to B&L PMT only, 1 = apply to mPMT only, -1 = apply to both PMTs
# function_name: defines the functional form of the multiplicative factor derived from the fit parameter, modify AnaFitParameters class and ParameterFunction.hh to include new functions
# npar: number of parameters in this class
# [par_setup]: vector of fit parameter set, each parameter is specified as [parameter name, prior, step, limit_low, limit_high, fixed]
# [binning_config]: defines the parameter mapping for each PMT, each PMT is affected by at most one parameter in each class
# optional_config
# ["covariance",fileName,matrixName] : optional config to load parameter prior covariance matrix
# ["prior",fileName,histname] : optional config to load parameter prior central values, overriding values in [par_setup]

# The example here specifies four classes of parameters
# norm is the overall normalization for each sample, you may need to trial and error to get the prior right
# alpha is the light attenuation parameter which parameterizes the scale factor as exp(-R/alpha)*omega
# BnL_angular and mPMT_angular are the angular response parameters. The parameter corresponding to costh={0.8,1} is fixed at 1.
# In this example, number of PE = norm*exp(-R/alpha)*omega*angular_response
norm         = [  -1,    # pmt_type: 0 = apply to B&L PMT only, 1 = apply to mPMT only, -1 = apply to both PMTs
                  "Identity",    # function_name: defines the functional form of the multiplicative factor derived from the fit parameter, modify AnaFitParameters class and ParameterFunction.hh to include new functions
                  2,  # npar: number of parameters in this class
                  [["BnL_norm", 1E6, 1E5, 0, 1E8, false], ["mPMT_norm", 1E6, 1E5, 0, 1E8, false]],  # [par_setup]: vector of fit parameter set, each parameter is specified as [parameter name, prior, step, limit_low, limit_high, fixed]
                                                                                                    # if length of vector < npar, the last entry will be used for all remaining parameters
                  ["sampleId_binning.txt", ["sample"]], # [binning_config]: defines the parameter mapping for each PMT, each PMT is affected by at most one parameter in each class
               ]
alpha        = [ -1, "Attenuation", 1, [["alpha", 10000, 10000, 0, 100000, false]] , ["R_binning.txt",    ["R"]]     ]
BnL_angular  = [  0, "Identity",    6, [["BnL_angular1", 1, 0.1, 0, 10, false],
                                        ["BnL_angular2", 1, 0.1, 0, 10, false],
                                        ["BnL_angular3", 1, 0.1, 0, 10, false],
                                        ["BnL_angular4", 1, 0.1, 0, 10, false],
                                        ["BnL_angular5", 1, 0.1, 0, 10, false],
                                        ["BnL_angular6", 1, 0.1, 0, 10, true]] , ["BnL_costh_binning.txt",["costh"]] ]
mPMT_angular = [  1, "Identity",   10, [["mPMT_angular1",1, 0.1, 0, 10, false],
                                        ["mPMT_angular2",1, 0.1, 0, 10, false],
                                        ["mPMT_angular3",1, 0.1, 0, 10, false],
                                        ["mPMT_angular4",1, 0.1, 0, 10, false],
                                        ["mPMT_angular5",1, 0.1, 0, 10, false],
                                        ["mPMT_angular6",1, 0.1, 0, 10, false],
                                        ["mPMT_angular7",1, 0.1, 0, 10, false],
                                        ["mPMT_angular8",1, 0.1, 0, 10, false],
                                        ["mPMT_angular9",1, 0.1, 0, 10, false],
                                        ["mPMT_angular10",1, 0.1, 0, 10, true]] , ["costh_binning.txt",["costh"]] ]
